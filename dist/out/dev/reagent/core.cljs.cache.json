["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$dbg","~$reagent.debug","~$$!","~$reagent.interop","~$prn","^6","~$$","^8"],"~:excludes",["~#set",["~$atom","~$flush","~$partial"]],"~:name","~$reagent.core","~:imports",null,"~:requires",["^ ","~$reagent.impl.util","^C","~$reagent.dom.server","^D","~$dom","~$reagent.dom","~$comp","~$reagent.impl.component","^8","^8","~$reagent.ratom","^I","~$reagent.impl.template","^J","~$reagent.impl.batching","^K","~$server","^D","^H","^H","~$util","^C","~$tmpl","^J","~$ratom","^I","~$deb","^6","~$batch","^K","^6","^6","^F","^F"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$after-render",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","~:line",336,"~:column",7,"~:end-line",336,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^12",[["~$f"]]]]],"~:doc","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after components are rendered."],"^?","~$reagent.core/after-render","^X","dist/out/dev/reagent/core.cljs","^10",19,"~:method-params",["^12",[["~$f"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^Z",1,"~:variadic?",false,"^Y",336,"~:ret-tag","~$any","^[",336,"~:max-fixed-arity",1,"~:fn-var",true,"^11",["^12",["^13",["^12",[["~$f"]]]]],"^14","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after components are rendered."],"~$current-component",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",129,"^Z",7,"^[",129,"^10",24,"^11",["^12",["^13",["^12",[[]]]]],"^14","Returns the current React component (a.k.a this) in a component\n  function."],"^?","~$reagent.core/current-component","^X","dist/out/dev/reagent/core.cljs","^10",24,"^16",["^12",[[]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",129,"^[",129,"^1<",0,"^1=",true,"^11",["^12",["^13",["^12",[[]]]]],"^14","Returns the current React component (a.k.a this) in a component\n  function."],"~$as-component",["^ ","^?","~$reagent.core/as-component","^X","dist/out/dev/reagent/core.cljs","^Y",87,"^Z",1,"^[",87,"^10",18,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",87,"^Z",6,"^[",87,"^10",18]],"~$adapt-react-class",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",49,"^Z",7,"^[",49,"^10",24,"^11",["^12",["^13",["^12",[["~$c"]]]]],"^14","Returns an adapter for a native React class, that may be used\njust like a Reagent component function or class in Hiccup forms."],"^?","~$reagent.core/adapt-react-class","^X","dist/out/dev/reagent/core.cljs","^10",24,"^16",["^12",[["~$c"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",49,"^1:","~$reagent.impl.template/NativeWrapper","^[",49,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["~$c"]]]]],"^14","Returns an adapter for a native React class, that may be used\njust like a Reagent component function or class in Hiccup forms."],"^<",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",217,"^Z",7,"^[",217,"^10",11,"^11",["^12",["^13",["^12",[["~$x"],["~$x","~$&","~$rest"]]]]],"^14","Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered.","~:top-fn",["^ ","^19",true,"^1<",1,"^16",["^12",[["~$x"]]],"^11",["^12",[["~$x"],["~$x","~$&","^1E"]]],"^18",["^12",[null,null]]]],"^?","~$reagent.core/atom","^X","dist/out/dev/reagent/core.cljs","^10",11,"^1F",["^ ","^19",true,"^1<",1,"^16",["^12",[["~$x"]]],"^11",["^12",[["~$x"],["~$x","~$&","^1E"]]],"^18",["^12",[null,null]]],"^16",["^12",[["~$x"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",true,"^Y",217,"^[",217,"^1<",1,"^1=",true,"^11",["^12",[["~$x"],["~$x","~$&","^1E"]]],"^14","Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered."],"~$merge-props",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",199,"^Z",7,"^[",199,"^10",18,"^11",["^12",["^13",["^12",[["~$defaults","~$props"]]]]],"^14","Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo."],"^?","~$reagent.core/merge-props","^X","dist/out/dev/reagent/core.cljs","^10",18,"^16",["^12",[["^1I","^1J"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",199,"^1:",["^;",[null,"^1;"]],"^[",199,"^1<",2,"^1=",true,"^11",["^12",["^13",["^12",[["^1I","^1J"]]]]],"^14","Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo."],"~$force-update-all",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",96,"^Z",16,"^[",96,"^10",32,"~:export",true,"^11",["^12",["^13",["^12",[[]]]]],"^14","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."],"^?","~$reagent.core/force-update-all","^X","dist/out/dev/reagent/core.cljs","^10",32,"^16",["^12",[[]]],"^17",null,"^1M",true,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",96,"^1:","~$string","^[",96,"^1<",0,"^1=",true,"^11",["^12",["^13",["^12",[[]]]]],"^14","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."],"~$as-element",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",44,"^Z",7,"^[",44,"^10",17,"^11",["^12",["^13",["^12",[["~$form"]]]]],"^14","Turns a vector of Hiccup syntax into a React element. Returns form unchanged if it is not a vector."],"^?","~$reagent.core/as-element","^X","dist/out/dev/reagent/core.cljs","^10",17,"^16",["^12",[["^1Q"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",44,"^1:",["^;",[null,"^1;","^1O"]],"^[",44,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^1Q"]]]]],"^14","Turns a vector of Hiccup syntax into a React element. Returns form unchanged if it is not a vector."],"~$rswap!",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",308,"^Z",7,"^[",308,"^10",13,"^11",["^12",["^13",["^12",[["~$a","~$f","~$&","~$args"]]]]],"^14","Swaps the value of a to be (apply f current-value-of-atom args).\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed – and it always returns nil.","^1F",["^ ","^19",true,"^1<",2,"^16",[["^12",["~$a","~$f","^1T"]]],"^11",["^12",[["~$a","~$f","~$&","^1T"]]],"^18",["^12",[null]]]],"^?","~$reagent.core/rswap!","^X","dist/out/dev/reagent/core.cljs","^10",13,"^1F",["^ ","^19",true,"^1<",2,"^16",[["^12",["~$a","~$f","^1T"]]],"^11",["^12",[["~$a","~$f","~$&","^1T"]]],"^18",["^12",[null]]],"^16",[["^12",["~$a","~$f","^1T"]]],"^17",null,"^18",["^12",[null]],"^Z",1,"^19",true,"^Y",308,"^1:","^1;","^[",308,"^1<",2,"^1=",true,"^11",["^12",[["~$a","~$f","~$&","^1T"]]],"^14","Swaps the value of a to be (apply f current-value-of-atom args).\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed – and it always returns nil."],"~$next-tick",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",329,"^Z",7,"^[",329,"^10",16,"^11",["^12",["^13",["^12",[["~$f"]]]]],"^14","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered."],"^?","~$reagent.core/next-tick","^X","dist/out/dev/reagent/core.cljs","^10",16,"^16",["^12",[["~$f"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",329,"^1:","^1;","^[",329,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["~$f"]]]]],"^14","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered."],"~$track",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",224,"^Z",7,"^[",224,"^10",12,"^11",["^12",["^13",["^12",[["~$f","~$&","^1T"]]]]],"^14","Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, @(track foo bar) will produce the same result\n  as (foo bar), but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref.","^1F",["^ ","^19",true,"^1<",1,"^16",[["^12",["~$f","^1T"]]],"^11",["^12",[["~$f","~$&","^1T"]]],"^18",["^12",[null]]]],"^?","~$reagent.core/track","^X","dist/out/dev/reagent/core.cljs","^10",12,"^1F",["^ ","^19",true,"^1<",1,"^16",[["^12",["~$f","^1T"]]],"^11",["^12",[["~$f","~$&","^1T"]]],"^18",["^12",[null]]],"^16",[["^12",["~$f","^1T"]]],"^17",null,"^18",["^12",[null]],"^Z",1,"^19",true,"^Y",224,"^1:","^1;","^[",224,"^1<",1,"^1=",true,"^11",["^12",[["~$f","~$&","^1T"]]],"^14","Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, @(track foo bar) will produce the same result\n  as (foo bar), but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref."],"^1J",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",176,"^Z",7,"^[",176,"^10",12,"^11",["^12",["^13",["^12",[["~$this"]]]]],"^14","Returns the props passed to a component."],"^?","~$reagent.core/props","^X","dist/out/dev/reagent/core.cljs","^10",12,"^16",["^12",[["^1Z"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",176,"^1:",["^;",["^1;","~$cljs.core/IMap","~$clj-nil"]],"^[",176,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns the props passed to a component."],"~$dispose!",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",248,"^Z",7,"^[",248,"^10",15,"^11",["^12",["^13",["^12",[["~$x"]]]]],"^14","Stop the result of track! from updating."],"^?","~$reagent.core/dispose!","^X","dist/out/dev/reagent/core.cljs","^10",15,"^16",["^12",[["~$x"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",248,"^1:","^1;","^[",248,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["~$x"]]]]],"^14","Stop the result of track! from updating."],"~$state-atom",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",135,"^Z",7,"^[",135,"^10",17,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns an atom containing a components state."],"^?","~$reagent.core/state-atom","^X","dist/out/dev/reagent/core.cljs","^10",17,"^16",["^12",[["^1Z"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",135,"^1:","^1;","^[",135,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns an atom containing a components state."],"^=",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",205,"^Z",7,"^[",205,"^10",12,"^11",["^12",["^13",["^12",[[]]]]],"^14","Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there."],"^?","~$reagent.core/flush","^X","dist/out/dev/reagent/core.cljs","^10",12,"^16",["^12",[[]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",205,"^1:","^1;","^[",205,"^1<",0,"^1=",true,"^11",["^12",["^13",["^12",[[]]]]],"^14","Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there."],"~$children",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",182,"^Z",7,"^[",182,"^10",15,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns the children passed to a component."],"^?","~$reagent.core/children","^X","dist/out/dev/reagent/core.cljs","^10",15,"^16",["^12",[["^1Z"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",182,"^1:",["^;",["^1;","^21"]],"^[",182,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns the children passed to a component."],"~$react",["^ ","^?","~$reagent.core/react","^X","dist/out/dev/reagent/core.cljs","^Y",16,"^Z",1,"^[",16,"^10",11,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",16,"^Z",6,"^[",16,"^10",11],"~:tag","~$js"],"~$wrap",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",253,"^Z",7,"^[",253,"^10",11,"^11",["^12",["^13",["^12",[["~$value","~$reset-fn","~$&","^1T"]]]]],"^14","Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n\n  Probably useful only for passing to child components.","^1F",["^ ","^19",true,"^1<",2,"^16",[["^12",["^2>","^2?","^1T"]]],"^11",["^12",[["^2>","^2?","~$&","^1T"]]],"^18",["^12",[null]]]],"^?","~$reagent.core/wrap","^X","dist/out/dev/reagent/core.cljs","^10",11,"^1F",["^ ","^19",true,"^1<",2,"^16",[["^12",["^2>","^2?","^1T"]]],"^11",["^12",[["^2>","^2?","~$&","^1T"]]],"^18",["^12",[null]]],"^16",[["^12",["^2>","^2?","^1T"]]],"^17",null,"^18",["^12",[null]],"^Z",1,"^19",true,"^Y",253,"^1:","^1;","^[",253,"^1<",2,"^1=",true,"^11",["^12",[["^2>","^2?","~$&","^1T"]]],"^14","Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n\n  Probably useful only for passing to child components."],"~$reactify-component",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",56,"^Z",7,"^[",56,"^10",25,"^11",["^12",["^13",["^12",[["~$c"]]]]],"^14","Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map."],"^?","~$reagent.core/reactify-component","^X","dist/out/dev/reagent/core.cljs","^10",25,"^16",["^12",[["~$c"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",56,"^1:",["^;",[null,"^1;"]],"^[",56,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["~$c"]]]]],"^14","Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map."],"~$unmount-component-at-node",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",76,"^Z",7,"^[",76,"^10",32,"^11",["^12",["^13",["^12",[["~$container"]]]]],"^14","Remove a component from the given DOM node."],"^?","~$reagent.core/unmount-component-at-node","^X","dist/out/dev/reagent/core.cljs","^10",32,"^16",["^12",[["^2D"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",76,"^1:","^1;","^[",76,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^2D"]]]]],"^14","Remove a component from the given DOM node."],"~$render-component",["^ ","^?","~$reagent.core/render-component","^X","dist/out/dev/reagent/core.cljs","^Y",88,"^Z",1,"^[",88,"^10",22,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",88,"^Z",6,"^[",88,"^10",22]],"~$render-to-string",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",81,"^Z",7,"^[",81,"^10",23,"^11",["^12",["^13",["^12",[["~$component"]]]]],"^14","Turns a component into an HTML string."],"^?","~$reagent.core/render-to-string","^X","dist/out/dev/reagent/core.cljs","^10",23,"^16",["^12",[["^2I"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",81,"^1:","^1;","^[",81,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^2I"]]]]],"^14","Turns a component into an HTML string."],"~$component-path",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",349,"^Z",7,"^[",349,"^10",21,"^11",["^12",["^13",["^12",[["~$c"]]]]]],"^?","~$reagent.core/component-path","^X","dist/out/dev/reagent/core.cljs","^10",21,"^16",["^12",[["~$c"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",349,"^1:",["^;",["^1;","^21"]],"^[",349,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["~$c"]]]]]],"~$cursor",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",276,"^Z",7,"^[",276,"^10",13,"^11",["^12",["^13",["^12",[["~$src","~$path"]]]]],"^14","Provide a cursor into a Reagent atom.\n\nBehaves like a Reagent atom but focuses updates and derefs to\nthe specified path within the wrapped Reagent atom. e.g.,\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n\nThe first parameter can also be a function, that should look something\nlike this:\n\n(defn set-get\n  ([k] (get-in @state k))\n  ([k v] (swap! state assoc-in k v)))\n\nThe function will be called with one argument – the path passed to\ncursor – when the cursor is deref'ed, and two arguments (path and new\nvalue) when the cursor is modified.\n\nGiven that set-get function, (and that state is a Reagent atom, or\nanother cursor) these cursors are equivalent:\n(cursor state [:foo]) and (cursor set-get [:foo]).\n"],"^?","~$reagent.core/cursor","^X","dist/out/dev/reagent/core.cljs","^10",13,"^16",["^12",[["^2N","^2O"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",276,"^1:","~$reagent.ratom/RCursor","^[",276,"^1<",2,"^1=",true,"^11",["^12",["^13",["^12",[["^2N","^2O"]]]]],"^14","Provide a cursor into a Reagent atom.\n\nBehaves like a Reagent atom but focuses updates and derefs to\nthe specified path within the wrapped Reagent atom. e.g.,\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n\nThe first parameter can also be a function, that should look something\nlike this:\n\n(defn set-get\n  ([k] (get-in @state k))\n  ([k v] (swap! state assoc-in k v)))\n\nThe function will be called with one argument – the path passed to\ncursor – when the cursor is deref'ed, and two arguments (path and new\nvalue) when the cursor is modified.\n\nGiven that set-get function, (and that state is a Reagent atom, or\nanother cursor) these cursors are equivalent:\n(cursor state [:foo]) and (cursor set-get [:foo]).\n"],"~$state",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",141,"^Z",7,"^[",141,"^10",12,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns the state of a component, as set with replace-state or set-state.\nEquivalent to (deref (r/state-atom this))"],"^?","~$reagent.core/state","^X","dist/out/dev/reagent/core.cljs","^10",12,"^16",["^12",[["^1Z"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",141,"^1:","^1;","^[",141,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns the state of a component, as set with replace-state or set-state.\nEquivalent to (deref (r/state-atom this))"],"~$render-component-to-string",["^ ","^?","~$reagent.core/render-component-to-string","^X","dist/out/dev/reagent/core.cljs","^Y",89,"^Z",1,"^[",89,"^10",32,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",89,"^Z",6,"^[",89,"^10",32]],"~$render-to-static-markup",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",91,"^Z",7,"^[",91,"^10",30,"^11",["^12",["^13",["^12",[["^2I"]]]]],"^14","Turns a component into an HTML string, without data-react-id attributes, etc."],"^?","~$reagent.core/render-to-static-markup","^X","dist/out/dev/reagent/core.cljs","^10",30,"^16",["^12",[["^2I"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",91,"^1:","^1;","^[",91,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^2I"]]]]],"^14","Turns a component into an HTML string, without data-react-id attributes, etc."],"~$dom-node",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",194,"^Z",7,"^[",194,"^10",15,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns the root DOM node of a mounted component."],"^?","~$reagent.core/dom-node","^X","dist/out/dev/reagent/core.cljs","^10",15,"^16",["^12",[["^1Z"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",194,"^1:","^1;","^[",194,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns the root DOM node of a mounted component."],"~$track!",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",240,"^Z",7,"^[",240,"^10",13,"^11",["^12",["^13",["^12",[["~$f","~$&","^1T"]]]]],"^14","An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!.","^1F",["^ ","^19",true,"^1<",1,"^16",[["^12",["~$f","^1T"]]],"^11",["^12",[["~$f","~$&","^1T"]]],"^18",["^12",[null]]]],"^?","~$reagent.core/track!","^X","dist/out/dev/reagent/core.cljs","^10",13,"^1F",["^ ","^19",true,"^1<",1,"^16",[["^12",["~$f","^1T"]]],"^11",["^12",[["~$f","~$&","^1T"]]],"^18",["^12",[null]]],"^16",[["^12",["~$f","^1T"]]],"^17",null,"^18",["^12",[null]],"^Z",1,"^19",true,"^Y",240,"^1:","^1;","^[",240,"^1<",1,"^1=",true,"^11",["^12",[["~$f","~$&","^1T"]]],"^14","An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!."],"~$is-client",["^ ","^?","~$reagent.core/is-client","^X","dist/out/dev/reagent/core.cljs","^Y",14,"^Z",1,"^[",14,"^10",15,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",14,"^Z",6,"^[",14,"^10",15],"^2;","~$boolean"],"~$replace-state",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",148,"^Z",7,"^[",148,"^10",20,"^11",["^12",["^13",["^12",[["^1Z","~$new-state"]]]]],"^14","Set state of a component.\nEquivalent to (reset! (state-atom this) new-state)"],"^?","~$reagent.core/replace-state","^X","dist/out/dev/reagent/core.cljs","^10",20,"^16",["^12",[["^1Z","^34"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",148,"^1:",["^;",[null,"^1;"]],"^[",148,"^1<",2,"^1=",true,"^11",["^12",["^13",["^12",[["^1Z","^34"]]]]],"^14","Set state of a component.\nEquivalent to (reset! (state-atom this) new-state)"],"^>",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",343,"^Z",7,"^[",343,"^10",14,"^11",["^12",["^13",["^12",[["~$f","~$&","^1T"]]]]],"^14","Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with =","^1F",["^ ","^19",true,"^1<",1,"^16",[["^12",["~$f","^1T"]]],"^11",["^12",[["~$f","~$&","^1T"]]],"^18",["^12",[null]]]],"^?","~$reagent.core/partial","^X","dist/out/dev/reagent/core.cljs","^10",14,"^1F",["^ ","^19",true,"^1<",1,"^16",[["^12",["~$f","^1T"]]],"^11",["^12",[["~$f","~$&","^1T"]]],"^18",["^12",[null]]],"^16",[["^12",["~$f","^1T"]]],"^17",null,"^18",["^12",[null]],"^Z",1,"^19",true,"^Y",343,"^1:","^1;","^[",343,"^1<",1,"^1=",true,"^11",["^12",[["~$f","~$&","^1T"]]],"^14","Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with ="],"~$set-state",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",156,"^Z",7,"^[",156,"^10",16,"^11",["^12",["^13",["^12",[["^1Z","^34"]]]]],"^14","Merge component state with new-state.\nEquivalent to (swap! (state-atom this) merge new-state)"],"^?","~$reagent.core/set-state","^X","dist/out/dev/reagent/core.cljs","^10",16,"^16",["^12",[["^1Z","^34"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",156,"^1:","^1;","^[",156,"^1<",2,"^1=",true,"^11",["^12",["^13",["^12",[["^1Z","^34"]]]]],"^14","Merge component state with new-state.\nEquivalent to (swap! (state-atom this) merge new-state)"],"~$argv",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",188,"^Z",7,"^[",188,"^10",11,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns the entire Hiccup form passed to the component."],"^?","~$reagent.core/argv","^X","dist/out/dev/reagent/core.cljs","^10",11,"^16",["^12",[["^1Z"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",188,"^1:",["^;",["~$cljs.core/IVector","^1;"]],"^[",188,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^1Z"]]]]],"^14","Returns the entire Hiccup form passed to the component."],"~$render",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",64,"^Z",7,"^[",64,"^10",13,"^11",["^12",["^13",["^12",[["^G","^2D"],["^G","^2D","~$callback"]]]]],"^14","Render a Reagent component into the DOM. The first argument may be \neither a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance.","^1F",["^ ","^19",false,"^1<",3,"^16",["^12",[["^G","^2D"],["^G","^2D","^3="]]],"^11",["^12",[["^G","^2D"],["^G","^2D","^3="]]],"^18",["^12",[null,null]]]],"^?","~$reagent.core/render","^X","dist/out/dev/reagent/core.cljs","^10",13,"^1F",["^ ","^19",false,"^1<",3,"^16",["^12",[["^G","^2D"],["^G","^2D","^3="]]],"^11",["^12",[["^G","^2D"],["^G","^2D","^3="]]],"^18",["^12",[null,null]]],"^16",["^12",[["^G","^2D"],["^G","^2D","^3="]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",64,"^[",64,"^1<",3,"^1=",true,"^11",["^12",[["^G","^2D"],["^G","^2D","^3="]]],"^14","Render a Reagent component into the DOM. The first argument may be \neither a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance."],"~$force-update",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",164,"^Z",7,"^[",164,"^10",19,"^11",["^12",["^13",["^12",[["^1Z"],["^1Z","~$deep"]]]]],"^14","Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed.","^1F",["^ ","^19",false,"^1<",2,"^16",["^12",[["^1Z"],["^1Z","^3@"]]],"^11",["^12",[["^1Z"],["^1Z","^3@"]]],"^18",["^12",[null,null]]]],"^?","~$reagent.core/force-update","^X","dist/out/dev/reagent/core.cljs","^10",19,"^1F",["^ ","^19",false,"^1<",2,"^16",["^12",[["^1Z"],["^1Z","^3@"]]],"^11",["^12",[["^1Z"],["^1Z","^3@"]]],"^18",["^12",[null,null]]],"^16",["^12",[["^1Z"],["^1Z","^3@"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",164,"^[",164,"^1<",2,"^1=",true,"^11",["^12",[["^1Z"],["^1Z","^3@"]]],"^14","Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed."],"~$create-class",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",109,"^Z",7,"^[",109,"^10",19,"^11",["^12",["^13",["^12",[["~$spec"]]]]],"^14","Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:reagent-render (fn [args....])   ;; or :render (fn [this])\n}\n\nEverything is optional, except either :reagent-render or :render.\n"],"^?","~$reagent.core/create-class","^X","dist/out/dev/reagent/core.cljs","^10",19,"^16",["^12",[["^3C"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",109,"^1:","^1;","^[",109,"^1<",1,"^1=",true,"^11",["^12",["^13",["^12",[["^3C"]]]]],"^14","Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:reagent-render (fn [args....])   ;; or :render (fn [this])\n}\n\nEverything is optional, except either :reagent-render or :render.\n"],"~$create-element",["^ ","^V",null,"^W",["^ ","^X","/home/david/Code/davewm.github.io/dist/out/dev/reagent/core.cljs","^Y",18,"^Z",7,"^[",18,"^10",21,"^11",["^12",["^13",["^12",[["~$type"],["^3F","^1J"],["^3F","^1J","~$child"],["^3F","^1J","^3G","~$&","^27"]]]]],"^14","Create a native React element, by calling React.createElement directly.\n\nThat means the second argument must be a javascript object (or nil), and\nthat any Reagent hiccup forms must be processed with as-element. For example\nlike this:\n\n   (r/create-element \"div\" #js{:className \"foo\"}\n      \"Hi \" (r/as-element [:strong \"world!\"])\n\nwhich is equivalent to\n\n   [:div.foo \"Hi\" [:strong \"world!\"]]\n","^1F",["^ ","^19",true,"^1<",3,"^16",["^12",[["^3F"],["^3F","^1J"],["^3F","^1J","^3G"]]],"^11",["^12",[["^3F"],["^3F","^1J"],["^3F","^1J","^3G"],["^3F","^1J","^3G","~$&","^27"]]],"^18",["^12",[null,null,null,null]]]],"^?","~$reagent.core/create-element","^X","dist/out/dev/reagent/core.cljs","^10",21,"^1F",["^ ","^19",true,"^1<",3,"^16",["^12",[["^3F"],["^3F","^1J"],["^3F","^1J","^3G"]]],"^11",["^12",[["^3F"],["^3F","^1J"],["^3F","^1J","^3G"],["^3F","^1J","^3G","~$&","^27"]]],"^18",["^12",[null,null,null,null]]],"^16",["^12",[["^3F"],["^3F","^1J"],["^3F","^1J","^3G"]]],"^17",null,"^18",["^12",[null,null,null,null]],"^Z",1,"^19",true,"^Y",18,"^[",18,"^1<",3,"^1=",true,"^11",["^12",[["^3F"],["^3F","^1J"],["^3F","^1J","^3G"],["^3F","^1J","^3G","~$&","^27"]]],"^14","Create a native React element, by calling React.createElement directly.\n\nThat means the second argument must be a javascript object (or nil), and\nthat any Reagent hiccup forms must be processed with as-element. For example\nlike this:\n\n   (r/create-element \"div\" #js{:className \"foo\"}\n      \"Hi \" (r/as-element [:strong \"world!\"])\n\nwhich is equivalent to\n\n   [:div.foo \"Hi\" [:strong \"world!\"]]\n"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^@","^@","^O","^I","^I","^I","^P","^6","^6","^6","^8","^8"],"^14",null]
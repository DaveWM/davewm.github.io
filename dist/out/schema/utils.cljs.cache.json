["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$record?"]],"~:name","~$schema.utils","~:imports",null,"~:requires",["^ ","~$goog.string.format","^<","~$gstring","~$goog.string","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$NamedError",["^ ","~:num-fields",2,"~:protocols",["^6",["~$cljs.core/IPrintWithWriter"]],"^8","~$schema.utils/NamedError","~:file","dist/out/schema/utils.cljs","~:end-column",20,"~:type",true,"~:column",10,"~:line",89,"~:record",false,"~:end-line",89,"~:tag","~$function","~:skip-protocol-flag",["^6",["^E"]]],"~$error?",["^ ","~:protocol-inline",null,"~:meta",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",111,"^J",7,"^M",111,"^H",13,"~:arglists",["~#list",["~$quote",["^U",[["~$x"]]]]]],"^8","~$schema.utils/error?","^G","dist/out/schema/utils.cljs","^H",13,"~:method-params",["^U",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^J",1,"~:variadic?",false,"^K",111,"~:ret-tag","~$boolean","^M",111,"~:max-fixed-arity",1,"~:fn-var",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"~$make-ValidationError",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",80,"^J",7,"^M",80,"^H",27,"^T",["^U",["^V",["^U",[["~$schema","~$value","~$expectation-delay","~$fail-explanation"]]]]],"~:doc","for cljs sake (easier than normalizing imports in macros.clj)"],"^8","~$schema.utils/make-ValidationError","^G","dist/out/schema/utils.cljs","^H",27,"^X",["^U",[["^15","^16","^17","^18"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",80,"^10","~$schema.utils/ValidationError","^M",80,"^12",4,"^13",true,"^T",["^U",["^V",["^U",[["^15","^16","^17","^18"]]]]],"^19","for cljs sake (easier than normalizing imports in macros.clj)"],"~$->SimpleVCell",["^ ","^R",null,"^S",["^ ","^D",["^6",["~$schema.utils/PSimpleCell"]],"^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^H",21,"^J",10,"~:factory","~:positional","^K",182,"^M",182,"^T",["^U",["^V",["^U",[["~$q"]]]]],"^P",null,"^19","Positional factory function for schema.utils/SimpleVCell."],"^D",["^6",["^1="]],"^8","~$schema.utils/->SimpleVCell","^G","dist/out/schema/utils.cljs","^H",21,"^X",["^U",[["~$q"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^1>","^1?","^K",182,"^10","~$schema.utils/SimpleVCell","^M",182,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["~$q"]]]]],"^P",null,"^19","Positional factory function for schema.utils/SimpleVCell."],"~$map->ErrorContainer",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^H",26,"^J",12,"~:internal-ctor",true,"^1>","~:map","^K",105,"^M",105,"^T",["^U",["^V",["^U",[["~$G__20761"]]]]],"^19","Factory function for schema.utils/ErrorContainer, taking a map of keywords to field values."],"^8","~$schema.utils/map->ErrorContainer","^G","dist/out/schema/utils.cljs","^H",26,"^X",["^U",[["^1E"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^1C",true,"^[",false,"^1>","^1D","^K",105,"^10","~$schema.utils/ErrorContainer","^M",105,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["^1E"]]]]],"^19","Factory function for schema.utils/ErrorContainer, taking a map of keywords to field values."],"~$wrap-error-name",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",118,"^J",7,"^M",118,"^H",22,"^T",["^U",["^V",["^U",[["~$name","~$maybe-error"]]]]],"^19","If maybe-error is an error, wrap the inner value in a NamedError; otherwise, return as-is"],"^8","~$schema.utils/wrap-error-name","^G","dist/out/schema/utils.cljs","^H",22,"^X",["^U",[["^1I","^1J"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",118,"^10",["^6",[null,"^1G"]],"^M",118,"^12",2,"^13",true,"^T",["^U",["^V",["^U",[["^1I","^1J"]]]]],"^19","If maybe-error is an error, wrap the inner value in a NamedError; otherwise, return as-is"],"~$value-name",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",33,"^J",7,"^M",33,"^H",17,"^T",["^U",["^V",["^U",[["^16"]]]]],"^19","Provide a descriptive short name for a value."],"^8","~$schema.utils/value-name","^G","dist/out/schema/utils.cljs","^H",17,"^X",["^U",[["^16"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",33,"^10",["^6",[null,"~$any"]],"^M",33,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["^16"]]]]],"^19","Provide a descriptive short name for a value."],"~$SimpleVCell",["^ ","^C",1,"^D",["^6",["^1="]],"^8","^1A","^G","dist/out/schema/utils.cljs","^H",21,"^I",true,"^J",10,"^K",182,"^L",false,"^M",182,"^N","^O","^P",null],"~$result-builder",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",125,"^J",7,"^M",125,"^H",21,"^T",["^U",["^V",["^U",[["~$lift-to-error"]]]]],"^19","Build up a result by conjing values, producing an error if at least one\n   sub-value returns an error."],"^8","~$schema.utils/result-builder","^G","dist/out/schema/utils.cljs","^H",21,"^X",["^U",[["^1Q"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",125,"^10","^O","^M",125,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["^1Q"]]]]],"^19","Build up a result by conjing values, producing an error if at least one\n   sub-value returns an error."],"~$set_cell",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",178,"^J",4,"^M",178,"^H",12,"~:protocol","^1=","^19",null,"^T",["^U",["^V",["^U",[["~$this","~$x"]]]]]],"^1T","^1=","^8","~$schema.utils/set_cell","^G","dist/out/schema/utils.cljs","^H",12,"^X",["^U",[["^1U","~$x"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",176,"^10","^1N","^M",178,"^12",2,"^13",true,"^T",["^U",["^V",["^U",[["^1U","~$x"]]]]],"^19",null],"~$get_cell",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",177,"^J",4,"^M",177,"^H",12,"^1T","^1=","^19",null,"^T",["^U",["^V",["^U",[["^1U"]]]]]],"^1T","^1=","^8","~$schema.utils/get_cell","^G","dist/out/schema/utils.cljs","^H",12,"^X",["^U",[["^1U"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",176,"^10","^1N","^M",177,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["^1U"]]]]],"^19",null],"~$use-fn-validation",["^ ","^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",187,"^J",32,"^M",187,"^H",49,"^N","~$schema.utils.PSimpleCell"],"^8","~$schema.utils/use-fn-validation","^G","dist/out/schema/utils.cljs","^H",49,"^J",1,"^K",187,"^M",187,"^N","^1Z","^19","Turn on run-time function validation for functions compiled when\n   s/compile-fn-validation was true -- has no effect for functions compiled\n   when it is false."],"~$ValidationError",["^ ","^C",4,"^D",["^6",["^E"]],"^8","^1;","^G","dist/out/schema/utils.cljs","^H",25,"^I",true,"^J",10,"^K",68,"^L",false,"^M",68,"^N","^O","^P",["^6",["^E"]]],"~$format*",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",30,"^J",7,"^M",30,"^H",14,"^T",["^U",["^V",["^U",[["~$fmt","~$&","~$args"]]]]],"~:top-fn",["^ ","^[",true,"^12",1,"^X",[["^U",["^22","^23"]]],"^T",["^U",[["^22","~$&","^23"]]],"^Z",["^U",[null]]]],"^8","~$schema.utils/format*","^G","dist/out/schema/utils.cljs","^H",14,"^24",["^ ","^[",true,"^12",1,"^X",[["^U",["^22","^23"]]],"^T",["^U",[["^22","~$&","^23"]]],"^Z",["^U",[null]]],"^X",[["^U",["^22","^23"]]],"^Y",null,"^Z",["^U",[null]],"^J",1,"^[",true,"^K",30,"^10","^1N","^M",30,"^12",1,"^13",true,"^T",["^U",[["^22","~$&","^23"]]]],"~$fn-schema-bearer",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",23,"^J",7,"^M",23,"^H",23,"^T",["^U",["^V",["^U",[["~$f"]]]]],"^19","What class can we associate the fn schema with? In Clojure use the class of the fn; in\n   cljs just use the fn itself."],"^8","~$schema.utils/fn-schema-bearer","^G","dist/out/schema/utils.cljs","^H",23,"^X",["^U",[["~$f"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",23,"^M",23,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["~$f"]]]]],"^19","What class can we associate the fn schema with? In Clojure use the class of the fn; in\n   cljs just use the fn itself."],"~$->ValidationError",["^ ","^R",null,"^S",["^ ","^D",["^6",["^E"]],"^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^H",25,"^J",10,"^1>","^1?","^K",68,"^M",68,"^T",["^U",["^V",["^U",[["^15","^16","^17","^18"]]]]],"^P",["^6",["^E"]],"^19","Positional factory function for schema.utils/ValidationError."],"^D",["^6",["^E"]],"^8","~$schema.utils/->ValidationError","^G","dist/out/schema/utils.cljs","^H",25,"^X",["^U",[["^15","^16","^17","^18"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^1>","^1?","^K",68,"^10","^1;","^M",68,"^12",4,"^13",true,"^T",["^U",["^V",["^U",[["^15","^16","^17","^18"]]]]],"^P",["^6",["^E"]],"^19","Positional factory function for schema.utils/ValidationError."],"~$named-error-explain",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",94,"^J",7,"^M",94,"^H",26,"^T",["^U",["^V",["^U",[["~$err"]]]]]],"^8","~$schema.utils/named-error-explain","^G","dist/out/schema/utils.cljs","^H",26,"^X",["^U",[["^2;"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",94,"^10","~$cljs.core/List","^M",94,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["^2;"]]]]]],"^7",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",54,"^J",7,"^M",54,"^H",14,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"^8","~$schema.utils/record?","^G","dist/out/schema/utils.cljs","^H",14,"^X",["^U",[["~$x"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",54,"^10","^11","^M",54,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"~$->NamedError",["^ ","^R",null,"^S",["^ ","^D",["^6",["^E"]],"^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^H",20,"^J",10,"^1>","^1?","^K",89,"^M",89,"^T",["^U",["^V",["^U",[["^1I","~$error"]]]]],"^P",["^6",["^E"]],"^19","Positional factory function for schema.utils/NamedError."],"^D",["^6",["^E"]],"^8","~$schema.utils/->NamedError","^G","dist/out/schema/utils.cljs","^H",20,"^X",["^U",[["^1I","^2@"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^1>","^1?","^K",89,"^10","^F","^M",89,"^12",2,"^13",true,"^T",["^U",["^V",["^U",[["^1I","^2@"]]]]],"^P",["^6",["^E"]],"^19","Positional factory function for schema.utils/NamedError."],"~$type-of",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",19,"^J",7,"^M",19,"^H",14,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"^8","~$schema.utils/type-of","^G","dist/out/schema/utils.cljs","^H",14,"^X",["^U",[["~$x"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",19,"^10","^1N","^M",19,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"~$declare-class-schema!",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",160,"^J",9,"^M",160,"^H",30,"^T",["^U",["^V",["^U",[["~$klass","^15"]]]]]],"^8","~$schema.utils/declare-class-schema!","^G","dist/out/schema/utils.cljs","^H",30,"^X",["^U",[["^2E","^15"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",3,"^[",false,"^K",160,"^10","^1N","^M",160,"^12",2,"^13",true,"^T",["^U",["^V",["^U",[["^2E","^15"]]]]]],"~$ErrorContainer",["^ ","^C",1,"^D",["^6",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","^E","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^8","^1G","^G","dist/out/schema/utils.cljs","^H",26,"^I",true,"^J",12,"^1C",true,"^K",105,"^L",true,"^M",105,"^N","^O","^P",["^6",["^2H","^2I","^2J","^2K","^2L","^2M","^2N","^2O","^2P","^E","^2Q","^2R","^2S","^2T","^2U"]]],"~$PSimpleCell",["^ ","^S",["^ ","~:protocol-symbol",true,"^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^H",25,"^J",14,"^K",176,"~:protocol-info",["^ ","~:methods",["^ ","^1W",[["^1U"]],"^1S",[["^1U","~$x"]]]],"^M",176,"^19",null,"~:jsdoc",["^U",["@interface"]]],"^2W",true,"^8","^1=","^G","dist/out/schema/utils.cljs","^H",25,"^J",1,"^K",176,"^2X",["^ ","^2Y",["^ ","^1W",[["^1U"]],"^1S",[["^1U","~$x"]]]],"~:info",null,"^M",176,"^N","^1N","~:impls",["^6",["^1A"]],"^19",null,"^2Z",["^U",["@interface"]]],"~$->ErrorContainer",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^H",26,"^J",12,"^1C",true,"^1>","^1?","^K",105,"^M",105,"^T",["^U",["^V",["^U",[["^2@"]]]]],"^19","Positional factory function for schema.utils/ErrorContainer."],"^8","~$schema.utils/->ErrorContainer","^G","dist/out/schema/utils.cljs","^H",26,"^X",["^U",[["^2@"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^1C",true,"^[",false,"^1>","^1?","^K",105,"^10","^1G","^M",105,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["^2@"]]]]],"^19","Positional factory function for schema.utils/ErrorContainer."],"~$memoize-id",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",41,"^J",7,"^M",41,"^H",17,"^T",["^U",["^V",["^U",[["~$f"]]]]],"^19","Identity version of memoize, because many schemas are records, and records\n   don't cache their hash codes (at least in Clojure 1.5.1).\n   Not thread safe, and doesn't cache falsey values."],"^8","~$schema.utils/memoize-id","^G","dist/out/schema/utils.cljs","^H",17,"^X",["^U",[["~$f"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",41,"^10","^O","^M",41,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["~$f"]]]]],"^19","Identity version of memoize, because many schemas are records, and records\n   don't cache their hash codes (at least in Clojure 1.5.1).\n   Not thread safe, and doesn't cache falsey values."],"~$class-schema",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",163,"^J",9,"^M",163,"^H",21,"^T",["^U",["^V",["^U",[["^2E"]]]]]],"^8","~$schema.utils/class-schema","^G","dist/out/schema/utils.cljs","^H",21,"^X",["^U",[["^2E"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",3,"^[",false,"^K",163,"^10","^1N","^M",163,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["^2E"]]]]]],"~$validation-error-explain",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",73,"^J",7,"^M",73,"^H",31,"^T",["^U",["^V",["^U",[["^2;"]]]]]],"^8","~$schema.utils/validation-error-explain","^G","dist/out/schema/utils.cljs","^H",31,"^X",["^U",[["^2;"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",73,"^10","^2=","^M",73,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["^2;"]]]]]],"~$error-val",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",114,"^J",7,"^M",114,"^H",16,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"^8","~$schema.utils/error-val","^G","dist/out/schema/utils.cljs","^H",16,"^X",["^U",[["~$x"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",114,"^10",["^6",["^1N","~$clj-nil"]],"^M",114,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"~$assoc-when",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",9,"^J",7,"^M",9,"^H",17,"^T",["^U",["^V",["^U",[["~$m","~$&","~$kvs"]]]]],"^19","Like assoc but only assocs when value is truthy.  Copied from plumbing.core so that\n   schema need not depend on plumbing.","^24",["^ ","^[",true,"^12",1,"^X",[["^U",["~$m","^3="]]],"^T",["^U",[["~$m","~$&","^3="]]],"^Z",["^U",[null]]]],"^8","~$schema.utils/assoc-when","^G","dist/out/schema/utils.cljs","^H",17,"^24",["^ ","^[",true,"^12",1,"^X",[["^U",["~$m","^3="]]],"^T",["^U",[["~$m","~$&","^3="]]],"^Z",["^U",[null]]],"^X",[["^U",["~$m","^3="]]],"^Y",null,"^Z",["^U",[null]],"^J",1,"^[",true,"^K",9,"^10","^1N","^M",9,"^12",1,"^13",true,"^T",["^U",[["~$m","~$&","^3="]]],"^19","Like assoc but only assocs when value is truthy.  Copied from plumbing.core so that\n   schema need not depend on plumbing."],"^2@",["^ ","^R",null,"^S",["^ ","^G","/home/david/Code/davewm.github.io/dist/out/schema/utils.cljs","^K",107,"^J",7,"^M",107,"^H",12,"^T",["^U",["^V",["^U",[["~$x"]]]]],"^19","Distinguish a value (must be non-nil) as an error."],"^8","~$schema.utils/error","^G","dist/out/schema/utils.cljs","^H",12,"^X",["^U",[["~$x"]]],"^Y",null,"^Z",["^U",[null,null]],"^J",1,"^[",false,"^K",107,"^10","^1G","^M",107,"^12",1,"^13",true,"^T",["^U",["^V",["^U",[["~$x"]]]]],"^19","Distinguish a value (must be non-nil) as an error."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~$named","^11","~$q","^15","^18","^16","^1I","^17","~$not","~:error","^N","~:volatile-mutable","^2@"]],"~:order",["^15","^16","^17","^18","^3E","^1I","^2@","^3D","^3F","~$q","^N","^3G","^11"]],"^19","Private utilities used in schema implementation."]
;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name ajax.core, :imports nil, :requires {uri goog.Uri, t cognitect.transit, xhr goog.net.XhrIo, goog.net.XhrManager goog.net.XhrManager, goog.net.XhrIo goog.net.XhrIo, goog.json goog.json, goog.Uri.QueryData goog.Uri.QueryData, goog.Uri goog.Uri, query-data goog.Uri.QueryData, cognitect.transit cognitect.transit, goog.net.EventType goog.net.EventType, events goog.events, goog.structs goog.structs, goog-json goog.json, structs goog.structs, goog.json.Serializer goog.json.Serializer, xhrm goog.net.XhrManager, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, goog.events goog.events, reader cljs.reader, goog.net.ErrorCode goog.net.ErrorCode}, :uses nil, :defs {edn-request-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 139, :column 7, :end-line 139, :end-column 25, :arglists (quote ([]))}, :name ajax.core/edn-request-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, -status {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 35, :column 4, :end-line 35, :end-column 11, :protocol ajax.core/AjaxResponse, :doc "Returns the HTTP Status of the response as an integer.", :arglists (quote ([this]))}, :protocol ajax.core/AjaxResponse, :name ajax.core/-status, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the HTTP Status of the response as an integer."}, PUT {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 456, :column 13, :end-line 456, :end-column 16, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/PUT, :variadic true, :file "dist\\out\\ajax\\core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 456, :end-line 456, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, detect-content-type {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 239, :column 17, :end-line 239, :end-column 36, :arglists (quote ([content-type opts format-entry] [content-type opts] [content-type])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([content-type opts format-entry] [content-type opts] [content-type]), :arglists ([content-type opts format-entry] [content-type opts] [content-type]), :arglists-meta (nil nil nil)}}, :name ajax.core/detect-content-type, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 36, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([content-type opts format-entry] [content-type opts] [content-type]), :arglists ([content-type opts format-entry] [content-type opts] [content-type]), :arglists-meta (nil nil nil)}, :method-params ([content-type opts format-entry] [content-type opts] [content-type]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 3, :fn-var true, :arglists ([content-type opts format-entry] [content-type opts] [content-type])}, POST {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 455, :column 13, :end-line 455, :end-column 17, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/POST, :variadic true, :file "dist\\out\\ajax\\core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 455, :end-line 455, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, keyword-response-format-2 {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 400, :column 7, :end-line 400, :end-column 32, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-response-format-2, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 32, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, AjaxImpl {:meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 18, :column 14, :end-line 18, :end-column 22, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-js-ajax-request [[this uri method body headers handler opts]]}}}, :protocol-symbol true, :name ajax.core/AjaxImpl, :file "dist\\out\\ajax\\core.cljs", :end-column 22, :column 1, :line 18, :protocol-info {:methods {-js-ajax-request [[this uri method body headers handler opts]]}}, :info nil, :end-line 18, :impls #{js/XMLHttpRequest goog/net.XhrManager goog/net.XhrIo}, :doc "An abstraction for a javascript class that implements\n   Ajax calls.", :jsdoc ("@interface")}, accept-header {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 257, :column 7, :end-line 257, :end-column 20, :arglists (quote ([{:keys [response-format], :as opts}]))}, :name ajax.core/accept-header, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 20, :method-params ([p__24854]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [response-format], :as opts}]))}, transit-request-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 147, :column 7, :end-line 147, :end-column 29, :arglists (quote ([] [{:keys [type writer], :as opts}])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type writer], :as opts}]), :arglists ([] [{:keys [type writer], :as opts}]), :arglists-meta (nil nil)}}, :name ajax.core/transit-request-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type writer], :as opts}]), :arglists ([] [{:keys [type writer], :as opts}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [type writer], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [type writer], :as opts}])}, transit-read {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 154, :column 17, :end-line 154, :end-column 29, :arglists (quote ([reader raw xhrio] [reader raw] [reader])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader raw xhrio] [reader raw] [reader]), :arglists ([reader raw xhrio] [reader raw] [reader]), :arglists-meta (nil nil nil)}}, :name ajax.core/transit-read, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader raw xhrio] [reader raw] [reader]), :arglists ([reader raw xhrio] [reader raw] [reader]), :arglists-meta (nil nil nil)}, :method-params ([reader raw xhrio] [reader raw] [reader]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 3, :fn-var true, :arglists ([reader raw xhrio] [reader raw] [reader])}, json-request-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 186, :column 7, :end-line 186, :end-column 26, :arglists (quote ([]))}, :name ajax.core/json-request-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, success? {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 125, :column 7, :end-line 125, :end-column 15, :arglists (quote ([status]))}, :name ajax.core/success?, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 15, :method-params ([status]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([status]))}, raw-response-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 179, :column 7, :end-line 179, :end-column 26, :arglists (quote ([] [opts])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/raw-response-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts])}, get-request-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 337, :column 7, :end-line 337, :end-column 25, :arglists (quote ([format]))}, :name ajax.core/get-request-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 25, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 337, :end-line 337, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format]))}, process-inputs {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 348, :column 7, :end-line 348, :end-column 21, :arglists (quote ([{:keys [uri method format params headers]} {:keys [content-type]}]))}, :name ajax.core/process-inputs, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 21, :method-params ([p__24895 p__24896]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [uri method format params headers]} {:keys [content-type]}]))}, get-default-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 244, :column 7, :end-line 244, :end-column 25, :arglists (quote ([xhrio {:keys [response-format], :as opts}]))}, :name ajax.core/get-default-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 25, :method-params ([xhrio p__24842]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xhrio {:keys [response-format], :as opts}]))}, -abort {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 27, :column 4, :end-line 27, :end-column 10, :protocol ajax.core/AjaxRequest, :doc "Aborts a running ajax request, if possible.", :arglists (quote ([this]))}, :protocol ajax.core/AjaxRequest, :name ajax.core/-abort, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Aborts a running ajax request, if possible."}, detect-response-format-read {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 253, :column 17, :end-line 253, :end-column 44, :arglists (quote ([opts xhrio] [opts])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts xhrio] [opts]), :arglists ([opts xhrio] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/detect-response-format-read, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 44, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts xhrio] [opts]), :arglists ([opts xhrio] [opts]), :arglists-meta (nil nil)}, :method-params ([opts xhrio] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 2, :fn-var true, :arglists ([opts xhrio] [opts])}, default-formats {:name ajax.core/default-formats, :file "dist\\out\\ajax\\core.cljs", :line 218, :column 1, :end-line 218, :end-column 21, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 218, :column 6, :end-line 218, :end-column 21}}, ready-state {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 78, :column 7, :end-line 78, :end-column 18, :arglists (quote ([e]))}, :name ajax.core/ready-state, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 18, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, interpret-response {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 306, :column 7, :end-line 306, :end-column 25, :arglists (quote ([{:keys [read], :as format} xhrio]))}, :name ajax.core/interpret-response, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 25, :method-params ([p__24883 xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 306, :end-line 306, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [read], :as format} xhrio]))}, -status-text {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 37, :column 4, :end-line 37, :end-column 16, :protocol ajax.core/AjaxResponse, :doc "Returns the HTTP Status Text of the response as a string.", :arglists (quote ([this]))}, :protocol ajax.core/AjaxResponse, :name ajax.core/-status-text, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the HTTP Status Text of the response as a string."}, get-response-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 272, :column 7, :end-line 272, :end-column 26, :arglists (quote ([{:keys [response-format], :as opts}]))}, :name ajax.core/get-response-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 26, :method-params ([p__24866]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [response-format], :as opts}]))}, easy-ajax-request {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 446, :column 7, :end-line 446, :end-column 24, :arglists (quote ([uri method opts]))}, :name ajax.core/easy-ajax-request, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 24, :method-params ([uri method opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 446, :end-line 446, :max-fixed-arity 3, :fn-var true, :arglists (quote ([uri method opts]))}, -get-response-header {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 42, :column 4, :end-line 42, :end-column 24, :protocol ajax.core/AjaxResponse, :doc "Gets the specified response header (specified by a string) as a string.", :arglists (quote ([this header]))}, :protocol ajax.core/AjaxResponse, :name ajax.core/-get-response-header, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 24, :method-params ([this header]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this header])), :doc "Gets the specified response header (specified by a string) as a string."}, AjaxResponse {:meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 33, :column 14, :end-line 33, :end-column 26, :doc "An abstraction for an ajax response.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-status [[this]], -status-text [[this]], -body [[this]], -get-response-header [[this header]], -was-aborted [[this]]}}}, :protocol-symbol true, :name ajax.core/AjaxResponse, :file "dist\\out\\ajax\\core.cljs", :end-column 26, :column 1, :line 33, :protocol-info {:methods {-status [[this]], -status-text [[this]], -body [[this]], -get-response-header [[this header]], -was-aborted [[this]]}}, :info nil, :end-line 33, :impls #{js/XMLHttpRequest goog/net.XhrIo}, :doc "An abstraction for an ajax response.", :jsdoc ("@interface")}, exception-response {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 281, :column 7, :end-line 281, :end-column 25, :arglists (quote ([e status {:keys [description]} xhrio]))}, :name ajax.core/exception-response, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 25, :method-params ([e status p__24871 xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 4, :fn-var true, :arglists (quote ([e status {:keys [description]} xhrio]))}, submittable? {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([params]))}, :name ajax.core/submittable?, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 19, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, uri-with-params {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 330, :column 7, :end-line 330, :end-column 22, :arglists (quote ([uri params]))}, :name ajax.core/uri-with-params, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 22, :method-params ([uri params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uri params]))}, transform-handler {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 423, :column 17, :end-line 423, :end-column 34, :arglists (quote ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists-meta (nil nil)}}, :name ajax.core/transform-handler, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :arglists-meta (nil nil)}, :method-params ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [handler error-handler finally]} [ok result]] [{:keys [handler error-handler finally]}])}, no-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 327, :column 7, :end-line 327, :end-column 16, :arglists (quote ([xhrio]))}, :name ajax.core/no-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 16, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio]))}, transform-opts {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 430, :column 7, :end-line 430, :end-column 21, :arglists (quote ([{:keys [method format response-format params], :as opts}]))}, :name ajax.core/transform-opts, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 21, :method-params ([p__24956]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [method format response-format params], :as opts}]))}, AjaxRequest {:meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 25, :column 14, :end-line 25, :end-column 25, :doc "An abstraction for a running ajax request.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-abort [[this]]}}}, :protocol-symbol true, :name ajax.core/AjaxRequest, :file "dist\\out\\ajax\\core.cljs", :end-column 25, :column 1, :line 25, :protocol-info {:methods {-abort [[this]]}}, :info nil, :end-line 25, :impls #{js/XMLHttpRequest goog/net.XhrIo}, :doc "An abstraction for a running ajax request.", :jsdoc ("@interface")}, js-handler {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 365, :column 17, :end-line 365, :end-column 27, :arglists (quote ([response-format handler xhrio] [response-format handler] [response-format])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response-format handler xhrio] [response-format handler] [response-format]), :arglists ([response-format handler xhrio] [response-format handler] [response-format]), :arglists-meta (nil nil nil)}}, :name ajax.core/js-handler, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([response-format handler xhrio] [response-format handler] [response-format]), :arglists ([response-format handler xhrio] [response-format handler] [response-format]), :arglists-meta (nil nil nil)}, :method-params ([response-format handler xhrio] [response-format handler] [response-format]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 3, :fn-var true, :arglists ([response-format handler xhrio] [response-format handler] [response-format])}, DELETE {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 457, :column 13, :end-line 457, :end-column 19, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/DELETE, :variadic true, :file "dist\\out\\ajax\\core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, params-to-str {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 167, :column 7, :end-line 167, :end-column 20, :arglists (quote ([params]))}, :name ajax.core/params-to-str, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 20, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, -was-aborted {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 44, :column 4, :end-line 44, :end-column 16, :protocol ajax.core/AjaxResponse, :doc "Was the response aborted.", :arglists (quote ([this]))}, :protocol ajax.core/AjaxResponse, :name ajax.core/-was-aborted, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Was the response aborted."}, json-response-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 200, :column 7, :end-line 200, :end-column 27, :arglists (quote ([] [{:keys [prefix keywords? raw]}])), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [prefix keywords? raw]}]), :arglists ([] [{:keys [prefix keywords? raw]}]), :arglists-meta (nil nil)}}, :name ajax.core/json-response-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [prefix keywords? raw]}]), :arglists ([] [{:keys [prefix keywords? raw]}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [prefix keywords? raw]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [prefix keywords? raw]}]), :doc "Returns a JSON response format.  Options include\n   :keywords? Returns the keys as keywords\n   :prefix A prefix that needs to be stripped off.  This is to\n   combat JSON hijacking.  If you're using JSON with GET request,\n   you should think about using this.\n   http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\n   http://haacked.com/archive/2009/06/24/json-hijacking.aspx"}, transit-write {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 143, :column 17, :end-line 143, :end-column 30, :arglists (quote ([writer params] [writer])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer params] [writer]), :arglists ([writer params] [writer]), :arglists-meta (nil nil)}}, :name ajax.core/transit-write, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer params] [writer]), :arglists ([writer params] [writer]), :arglists-meta (nil nil)}, :method-params ([writer params] [writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists ([writer params] [writer])}, get-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 226, :column 17, :end-line 226, :end-column 27, :arglists (quote ([opts format-entry] [opts])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts format-entry] [opts]), :arglists ([opts format-entry] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/get-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts format-entry] [opts]), :arglists ([opts format-entry] [opts]), :arglists-meta (nil nil)}, :method-params ([opts format-entry] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists ([opts format-entry] [opts])}, abort {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 123, :column 7, :end-line 123, :end-column 12, :arglists (quote ([this]))}, :name ajax.core/abort, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, ajax-request {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 375, :column 7, :end-line 375, :end-column 19, :arglists (quote ([{:keys [method api], :as opts}]))}, :name ajax.core/ajax-request, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 19, :method-params ([p__24921]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 375, :end-line 375, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [method api], :as opts}]))}, read-edn {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 130, :column 7, :end-line 130, :end-column 15, :arglists (quote ([xhrio]))}, :name ajax.core/read-edn, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 15, :method-params ([xhrio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhrio]))}, normalize-method {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 343, :column 7, :end-line 343, :end-column 23, :arglists (quote ([method]))}, :name ajax.core/normalize-method, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 23, :method-params ([method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 1, :fn-var true, :arglists (quote ([method]))}, -body {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 39, :column 4, :end-line 39, :end-column 9, :protocol ajax.core/AjaxResponse, :doc "Returns the response body as a string or as type specified in response-format\n    such as a blob or arraybuffer.", :arglists (quote ([this]))}, :protocol ajax.core/AjaxResponse, :name ajax.core/-body, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the response body as a string or as type specified in response-format\n    such as a blob or arraybuffer."}, url-request-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 175, :column 7, :end-line 175, :end-column 25, :arglists (quote ([]))}, :name ajax.core/url-request-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, keyword-response-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 416, :column 7, :end-line 416, :end-column 30, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-response-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 30, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, write-json {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 183, :column 7, :end-line 183, :end-column 17, :arglists (quote ([data]))}, :name ajax.core/write-json, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, fail {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 298, :column 7, :end-line 298, :end-column 11, :arglists (quote ([status status-text failure & params])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists ([status status-text failure & params]), :arglists-meta (nil)}}, :name ajax.core/fail, :variadic true, :file "dist\\out\\ajax\\core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(status status-text failure params)], :arglists ([status status-text failure & params]), :arglists-meta (nil)}, :method-params [(status status-text failure params)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 3, :fn-var true, :arglists ([status status-text failure & params])}, edn-response-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 133, :column 7, :end-line 133, :end-column 26, :arglists (quote ([] [opts])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/edn-response-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts])}, GET {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 453, :column 13, :end-line 453, :end-column 16, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/GET, :variadic true, :file "dist\\out\\ajax\\core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, HEAD {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 454, :column 13, :end-line 454, :end-column 17, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/HEAD, :variadic true, :file "dist\\out\\ajax\\core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 454, :end-line 454, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, accept-entry {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 233, :column 17, :end-line 233, :end-column 29, :arglists (quote ([opts format-entry] [opts])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts format-entry] [opts]), :arglists ([opts format-entry] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/accept-entry, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([opts format-entry] [opts]), :arglists ([opts format-entry] [opts]), :arglists-meta (nil nil)}, :method-params ([opts format-entry] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists ([opts format-entry] [opts])}, DirectlySubmittable {:meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 30, :column 14, :end-line 30, :end-column 33, :doc "A marker interface for types that can be directly sent to XhrIo.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {}}}, :protocol-symbol true, :name ajax.core/DirectlySubmittable, :file "dist\\out\\ajax\\core.cljs", :end-column 33, :column 1, :line 30, :protocol-info {:methods {}}, :info nil, :end-line 30, :impls #{js/Blob js/Document js/ArrayBufferView js/FormData}, :doc "A marker interface for types that can be directly sent to XhrIo.", :jsdoc ("@interface")}, TRACE {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 459, :column 13, :end-line 459, :end-column 18, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/TRACE, :variadic true, :file "dist\\out\\ajax\\core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 459, :end-line 459, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, transit-response-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 159, :column 7, :end-line 159, :end-column 30, :arglists (quote ([] [{:keys [type reader raw], :as opts}])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type reader raw], :as opts}]), :arglists ([] [{:keys [type reader raw], :as opts}]), :arglists-meta (nil nil)}}, :name ajax.core/transit-response-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [{:keys [type reader raw], :as opts}]), :arglists ([] [{:keys [type reader raw], :as opts}]), :arglists-meta (nil nil)}, :method-params ([] [{:keys [type reader raw], :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists ([] [{:keys [type reader raw], :as opts}])}, base-handler {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 370, :column 7, :end-line 370, :end-column 19, :arglists (quote ([response-format {:keys [handler]}]))}, :name ajax.core/base-handler, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 19, :method-params ([response-format p__24916]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 370, :max-fixed-arity 2, :fn-var true, :arglists (quote ([response-format {:keys [handler]}]))}, detect-response-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 262, :column 7, :end-line 262, :end-column 29, :arglists (quote ([] [opts])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name ajax.core/detect-response-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts])}, PATCH {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 460, :column 13, :end-line 460, :end-column 18, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/PATCH, :variadic true, :file "dist\\out\\ajax\\core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 460, :end-line 460, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}, json-read {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 190, :column 17, :end-line 190, :end-column 26, :arglists (quote ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists-meta (nil nil nil nil)}}, :name ajax.core/json-read, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :arglists-meta (nil nil nil nil)}, :method-params ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 4, :fn-var true, :arglists ([prefix raw keywords? xhrio] [prefix raw keywords?] [prefix raw] [prefix])}, keyword-request-format {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 387, :column 7, :end-line 387, :end-column 29, :arglists (quote ([format format-params]))}, :name ajax.core/keyword-request-format, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 29, :method-params ([format format-params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 2, :fn-var true, :arglists (quote ([format format-params]))}, -js-ajax-request {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 21, :column 4, :end-line 21, :end-column 20, :protocol ajax.core/AjaxImpl, :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest.", :arglists (quote ([this uri method body headers handler opts]))}, :protocol ajax.core/AjaxImpl, :name ajax.core/-js-ajax-request, :variadic false, :file "dist\\out\\ajax\\core.cljs", :end-column 20, :method-params ([this uri method body headers handler opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 21, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this uri method body headers handler opts])), :doc "Makes an actual ajax request.  All parameters except opts\n     are in JS format.  Should return an AjaxRequest."}, OPTIONS {:protocol-inline nil, :meta {:file "C:\\Users\\David\\Documents\\modern-cljs\\dist\\out\\ajax\\core.cljs", :line 458, :column 13, :end-line 458, :end-column 20, :arglists (quote ([uri & opts])), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}}, :name ajax.core/OPTIONS, :variadic true, :file "dist\\out\\ajax\\core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(uri opts)], :arglists ([uri & opts]), :arglists-meta (nil)}, :method-params [(uri opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 458, :end-line 458, :max-fixed-arity 1, :fn-var true, :arglists ([uri & opts]), :doc "accepts the URI and an optional map of options, options include:\n        :handler - the handler function for successful operation\n                   should accept a single parameter which is the\n                   deserialized response\n        :error-handler - the handler function for errors, should accept a\n                         map with keys :status and :status-text\n        :format - the format for the request\n        :response-format - the format for the response\n        :params - a map of parameters that will be sent with the request"}}, :require-macros {m ajax.macros, ajax.macros ajax.macros, p poppea, poppea poppea}, :cljs.analyzer/constants {:seen #{:response :description :finally :format :api :original-text :keywords? :read :not-initialized :else :failure :method :raw :response-format :status-text :aborted :processing-request :params :type :request-received :parse-error :prefix :headers :error-handler :write :priority :status :response-ready :writer :id :reader :parse :content-type :max-retries :error :exception :uri :json :timeout :connection-established :handler :keywordize-keys :with-credentials}, :order [:timeout :with-credentials :not-initialized :connection-established :request-received :processing-request :response-ready :response-format :type :id :priority :max-retries :read :description :content-type :write :writer :json :reader :raw :keywordize-keys :prefix :keywords? :else :format :status :failure :response :error :status-text :parse :original-text :parse-error :exception :aborted :uri :method :params :headers :handler :api :error-handler :finally]}, :doc nil}
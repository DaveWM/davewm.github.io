;; Analyzed by ClojureScript 1.7.145
{:use-macros {dbg reagent.debug, $! reagent.interop, $ reagent.interop}, :excludes #{}, :name reagent.dom, :imports nil, :requires {cljsjs.react.dom cljsjs.react.dom, util reagent.impl.util, reagent.impl.util reagent.impl.util, tmpl reagent.impl.template, reagent.impl.template reagent.impl.template, ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.debug reagent.debug, reagent.interop reagent.interop}, :uses nil, :defs {re-render-component {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 36, :column 8, :end-line 36, :end-column 27, :private true, :arglists (quote ([comp container]))}, :private true, :name reagent.dom/re-render-component, :variadic false, :file "dist/out/reagent/dom.cljs", :end-column 27, :method-params ([comp container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp container]))}, force-update-all {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 64, :column 7, :end-line 64, :end-column 23, :arglists (quote ([])), :doc "Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."}, :name reagent.dom/force-update-all, :variadic false, :file "dist/out/reagent/dom.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."}, render-comp {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 27, :column 8, :end-line 27, :end-column 19, :private true, :arglists (quote ([comp container callback]))}, :private true, :name reagent.dom/render-comp, :variadic false, :file "dist/out/reagent/dom.cljs", :end-column 19, :method-params ([comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp container callback]))}, imported {:name reagent.dom/imported, :file "dist/out/reagent/dom.cljs", :line 9, :column 1, :end-line 9, :end-column 28, :private true, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 9, :column 20, :end-line 9, :end-column 28, :private true}}, unmount-component-at-node {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 54, :column 7, :end-line 54, :end-column 32, :arglists (quote ([container]))}, :name reagent.dom/unmount-component-at-node, :variadic false, :file "dist/out/reagent/dom.cljs", :end-column 32, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container]))}, unmount-comp {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 23, :column 8, :end-line 23, :end-column 20, :private true, :arglists (quote ([container]))}, :private true, :name reagent.dom/unmount-comp, :variadic false, :file "dist/out/reagent/dom.cljs", :end-column 20, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container]))}, roots {:name reagent.dom/roots, :file "dist/out/reagent/dom.cljs", :line 21, :column 1, :end-line 21, :end-column 25, :private true, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 21, :column 20, :end-line 21, :end-column 25, :private true}}, module {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 11, :column 7, :end-line 11, :end-column 13, :arglists (quote ([]))}, :name reagent.dom/module, :variadic false, :file "dist/out/reagent/dom.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dom-node {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 57, :column 7, :end-line 57, :end-column 15, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component."}, :name reagent.dom/dom-node, :variadic false, :file "dist/out/reagent/dom.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component."}, render {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/reagent/dom.cljs", :line 39, :column 7, :end-line 39, :end-column 13, :arglists (quote ([comp container] [comp container callback])), :doc "Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([comp container] [comp container callback]), :arglists ([comp container] [comp container callback]), :arglists-meta (nil nil)}}, :name reagent.dom/render, :variadic false, :file "dist/out/reagent/dom.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([comp container] [comp container callback]), :arglists ([comp container] [comp container callback]), :arglists-meta (nil nil)}, :method-params ([comp container] [comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 3, :fn-var true, :arglists ([comp container] [comp container callback]), :doc "Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance."}}, :require-macros {ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}
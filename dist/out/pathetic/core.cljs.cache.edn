;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{resolve}, :name pathetic.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, uri goog.Uri, goog.Uri goog.Uri, string goog.string, goog.string goog.string}, :uses nil, :defs {relativize {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 185, :column 7, :end-line 185, :end-column 17, :arglists (quote ([base-path dest-path])), :doc "Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as destination-path, but\n   relative to base-path."}, :name pathetic.core/relativize, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 17, :method-params ([base-path dest-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-path dest-path])), :doc "Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as destination-path, but\n   relative to base-path."}, separator {:name pathetic.core/separator, :file "dist/out/pathetic/core.cljs", :line 11, :column 1, :end-line 11, :end-column 32, :private true, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 11, :column 23, :end-line 11, :end-column 32, :private true}}, unique-suffix {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 35, :column 8, :end-line 35, :end-column 21, :private true, :arglists (quote ([uninteresting-coll interesting-coll])), :doc "Returns the elements of interesting-coll that are not part of the common\n   prefix with uninteresting-coll."}, :private true, :name pathetic.core/unique-suffix, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 21, :method-params ([uninteresting-coll interesting-coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uninteresting-coll interesting-coll])), :doc "Returns the elements of interesting-coll that are not part of the common\n   prefix with uninteresting-coll."}, ends-with {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 226, :column 7, :end-line 226, :end-column 16, :arglists (quote ([s suffix]))}, :name pathetic.core/ends-with, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 16, :method-params ([s suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s suffix]))}, normalize {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 153, :column 7, :end-line 153, :end-column 16, :arglists (quote ([path])), :doc "Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any unremovable same-/parent-dir references. Takes the path\n   argument as a string and returns its result as a string."}, :name pathetic.core/normalize, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any unremovable same-/parent-dir references. Takes the path\n   argument as a string and returns its result as a string."}, url-normalize {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 270, :column 7, :end-line 270, :end-column 20, :arglists (quote ([url-or-string])), :doc "Behaves like normalize on the path part of a URL, but takes a j.n.URL or\n   string containing a URL, and returns a string containing the same URL\n   instead of just a path. Everything but the path part of the URL is unchanged\n   (query, anchor, protocol, etc)."}, :name pathetic.core/url-normalize, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 20, :method-params ([url-or-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url-or-string])), :doc "Behaves like normalize on the path part of a URL, but takes a j.n.URL or\n   string containing a URL, and returns a string containing the same URL\n   instead of just a path. Everything but the path part of the URL is unchanged\n   (query, anchor, protocol, etc)."}, split-url-on-path {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 256, :column 7, :end-line 256, :end-column 24, :arglists (quote ([url-or-string])), :doc "Given a URL or string containing a URL, returns a vector of the three\n   component strings: the stuff before the path, the path, and the stuff\n   after the path. Useful for destructuring."}, :name pathetic.core/split-url-on-path, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 24, :method-params ([url-or-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url-or-string])), :doc "Given a URL or string containing a URL, returns a vector of the three\n   component strings: the stuff before the path, the path, and the stuff\n   after the path. Useful for destructuring."}, render-path {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 81, :column 7, :end-line 81, :end-column 18, :arglists (quote ([path-pieces])), :doc "Given a seq of path elements as created by parse-path, returns a string\n   containing the path represented. This function will only\n   ever use unix-style path rules, so an absolute path will always start with\n   the \"/\" separator.\n\n   NOTE: It is NOT the goal of this function to perform normalization, it just\n   renders what it is given. HOWEVER, that does NOT mean that it is always true\n   that (= (render-path (parse-path some-path)) some-path). That is, you may not\n   render the exact same string you parsed. This is because the path syntax does\n   not have exactly one way to write every path."}, :name pathetic.core/render-path, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 18, :method-params ([path-pieces]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path-pieces])), :doc "Given a seq of path elements as created by parse-path, returns a string\n   containing the path represented. This function will only\n   ever use unix-style path rules, so an absolute path will always start with\n   the \"/\" separator.\n\n   NOTE: It is NOT the goal of this function to perform normalization, it just\n   renders what it is given. HOWEVER, that does NOT mean that it is always true\n   that (= (render-path (parse-path some-path)) some-path). That is, you may not\n   render the exact same string you parsed. This is because the path syntax does\n   not have exactly one way to write every path."}, starts-with {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 110, :column 7, :end-line 110, :end-column 18, :arglists (quote ([s prefix]))}, :name pathetic.core/starts-with, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 18, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix]))}, relativize* {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 160, :column 7, :end-line 160, :end-column 18, :arglists (quote ([base-path dest-path])), :doc "Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as dest-path, but\n   relative to base-path. Paths should be path vectors, and the return\n   value is also a path vector."}, :name pathetic.core/relativize*, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 18, :method-params ([base-path dest-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-path dest-path])), :doc "Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as dest-path, but\n   relative to base-path. Paths should be path vectors, and the return\n   value is also a path vector."}, common-prefix {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 28, :column 8, :end-line 28, :end-column 21, :private true, :arglists (quote ([coll1 coll2])), :doc "Given two collections, returns a sequence containing the prefix they\n   share. Example: (common-prefix [\\a \\b] [\\a \\b \\c \\d]) -> (\\a \\b)"}, :private true, :name pathetic.core/common-prefix, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 21, :method-params ([coll1 coll2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll1 coll2])), :doc "Given two collections, returns a sequence containing the prefix they\n   share. Example: (common-prefix [\\a \\b] [\\a \\b \\c \\d]) -> (\\a \\b)"}, parse-path {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 54, :column 7, :end-line 54, :end-column 17, :arglists (quote ([path])), :doc "Given a j.io.File or string containing a relative or absolute path,\n   returns the corresponding path vector data structure described at\n   the top of the file.\n\n   This function does not do any normalization or simplification. However,\n   because there is more than one way to write some paths, some simplification\n   might happen anyways, such as if the path starts with a (redundant) \".\"."}, :name pathetic.core/parse-path, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 17, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Given a j.io.File or string containing a relative or absolute path,\n   returns the corresponding path vector data structure described at\n   the top of the file.\n\n   This function does not do any normalization or simplification. However,\n   because there is more than one way to write some paths, some simplification\n   might happen anyways, such as if the path starts with a (redundant) \".\"."}, separator-pattern {:name pathetic.core/separator-pattern, :file "dist/out/pathetic/core.cljs", :line 12, :column 1, :end-line 12, :end-column 40, :private true, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 12, :column 23, :end-line 12, :end-column 40, :private true}}, normalize* {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 135, :column 7, :end-line 135, :end-column 17, :arglists (quote ([path-pieces])), :doc "Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any removable same-/parent-dir references. path-pieces\n   should be a path vector in the format returned by parse-path;\n   return value is a vector in the same format."}, :name pathetic.core/normalize*, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 17, :method-params ([path-pieces]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path-pieces])), :doc "Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any removable same-/parent-dir references. path-pieces\n   should be a path vector in the format returned by parse-path;\n   return value is a vector in the same format."}, resolve* {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 194, :column 7, :end-line 194, :end-column 15, :arglists (quote ([base-path other-path])), :doc "Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. All inputs and outputs are path vectors."}, :name pathetic.core/resolve*, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 15, :method-params ([base-path other-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-path other-path])), :doc "Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. All inputs and outputs are path vectors."}, up-dir {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 119, :column 7, :end-line 119, :end-column 13, :arglists (quote ([path-pieces])), :doc "Given a seq of path elements as created by parse-path, returns a new\n   seq of path elements, but having gone \"up\" one directory. That is,\n   applies a \"..\" component to the path."}, :name pathetic.core/up-dir, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 13, :method-params ([path-pieces]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path-pieces])), :doc "Given a seq of path elements as created by parse-path, returns a new\n   seq of path elements, but having gone \"up\" one directory. That is,\n   applies a \"..\" component to the path."}, ensure-trailing-separator {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 230, :column 7, :end-line 230, :end-column 32, :arglists (quote ([path])), :doc "If the path given does not have a trailing separator, returns a new path\n   that has one."}, :name pathetic.core/ensure-trailing-separator, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 32, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "If the path given does not have a trailing separator, returns a new path\n   that has one."}, split {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 48, :column 7, :end-line 48, :end-column 12, :arglists (quote ([path]))}, :name pathetic.core/split, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 12, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, url-ensure-trailing-separator {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 279, :column 7, :end-line 279, :end-column 36, :arglists (quote ([url-or-string])), :doc "Behaves like ensure-trailing-separator on the path part of a URL, but takes\n   a j.n.URL or string containing a URL, and returns a string containing the\n   same URL instead of just a path. Everything but the path part of the URL is\n   unchanged (query, anchor, protocol, etc)."}, :name pathetic.core/url-ensure-trailing-separator, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 36, :method-params ([url-or-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url-or-string])), :doc "Behaves like ensure-trailing-separator on the path part of a URL, but takes\n   a j.n.URL or string containing a URL, and returns a string containing the\n   same URL instead of just a path. Everything but the path part of the URL is\n   unchanged (query, anchor, protocol, etc)."}, as-url {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 250, :column 7, :end-line 250, :end-column 13, :arglists (quote ([url-or-string]))}, :name pathetic.core/as-url, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 13, :method-params ([url-or-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url-or-string]))}, resolve {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 210, :column 7, :end-line 210, :end-column 14, :arglists (quote ([base-path other-path])), :doc "Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. Accepts an optional third argument containing a string\n   with the path separator to use."}, :name pathetic.core/resolve, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 14, :method-params ([base-path other-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-path other-path])), :doc "Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. Accepts an optional third argument containing a string\n   with the path separator to use."}, absolute-path? {:protocol-inline nil, :meta {:file "/home/david/Documents/GitHub/davewm.github.io/dist/out/pathetic/core.cljs", :line 114, :column 7, :end-line 114, :end-column 21, :arglists (quote ([path])), :doc "Returns true if the given argument is an absolute path."}, :name pathetic.core/absolute-path?, :variadic false, :file "dist/out/pathetic/core.cljs", :end-column 21, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Returns true if the given argument is an absolute path."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :cwd :root}, :order [:root :cwd :else]}, :doc nil}
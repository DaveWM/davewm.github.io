;; Analyzed by ClojureScript 1.7.145
{:use-macros {some->> clojure.core, some-> clojure.core}, :excludes #{}, :name cemerick.url, :imports nil, :requires {pathetic pathetic.core, pathetic.core pathetic.core, string clojure.string, clojure.string clojure.string, uri goog.Uri, goog.Uri goog.Uri}, :uses nil, :defs {url-decode {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 25, :column 7, :end-line 25, :end-column 17, :arglists (quote ([string]))}, :name cemerick.url/url-decode, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 17, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string]))}, translate-default {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 101, :column 7, :end-line 101, :end-column 24, :arglists (quote ([s old-default new-default]))}, :name cemerick.url/translate-default, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 24, :method-params ([s old-default new-default]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s old-default new-default]))}, map->query {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 29, :column 7, :end-line 29, :end-column 17, :arglists (quote ([m]))}, :name cemerick.url/map->query, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, URL {:num-fields 8, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cemerick.url/Object cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cemerick.url/URL, :file "dist/out/cemerick/url.cljs", :end-column 15, :type true, :column 12, :internal-ctor true, :line 70, :record true, :end-line 70, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, url-creds {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 65, :column 8, :end-line 65, :end-column 17, :private true, :arglists (quote ([username password]))}, :private true, :name cemerick.url/url-creds, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 17, :method-params ([username password]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([username password]))}, split-param {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 41, :column 7, :end-line 41, :end-column 18, :arglists (quote ([param]))}, :name cemerick.url/split-param, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 18, :method-params ([param]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([param]))}, ->URL {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 70, :column 12, :end-line 70, :end-column 15, :internal-ctor true, :factory :positional, :arglists (quote ([protocol username password host port path query anchor]))}, :name cemerick.url/->URL, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 15, :method-params ([protocol username password host port path query anchor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 70, :end-line 70, :max-fixed-arity 8, :fn-var true, :arglists (quote ([protocol username password host port path query anchor]))}, port-str {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 57, :column 8, :end-line 57, :end-column 16, :private true, :arglists (quote ([protocol port]))}, :private true, :name cemerick.url/port-str, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 16, :method-params ([protocol port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([protocol port]))}, url-encode {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([string]))}, :name cemerick.url/url-encode, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 17, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string]))}, query->map {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 48, :column 7, :end-line 48, :end-column 17, :arglists (quote ([qstr]))}, :name cemerick.url/query->map, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 17, :method-params ([qstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([qstr]))}, url* {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 108, :column 8, :end-line 108, :end-column 12, :private true, :arglists (quote ([url]))}, :private true, :name cemerick.url/url*, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 12, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url]))}, map->URL {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 70, :column 12, :end-line 70, :end-column 15, :internal-ctor true, :factory :map, :arglists (quote ([G__22467]))}, :name cemerick.url/map->URL, :variadic false, :file "dist/out/cemerick/url.cljs", :end-column 15, :method-params ([G__22467]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22467]))}, url {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/cemerick/url.cljs", :line 121, :column 7, :end-line 121, :end-column 10, :arglists (quote ([url] [base-url & path-segments])), :doc "Returns a new URL record for the given url string(s).\n\n   The first argument must be a base url — either a complete url string, or\n   a pre-existing URL record instance that will serve as the basis for the new\n   URL.  Any additional arguments must be strings, which are interpreted as\n   relative paths that are successively resolved against the base url's path\n   to construct the final :path in the returned URL record. \n\n   This function does not perform any url-encoding.  Use `url-encode` to encode\n   URL path segments as desired before passing them into this fn.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([url]), :arglists ([url] [base-url & path-segments]), :arglists-meta (nil nil)}}, :name cemerick.url/url, :variadic true, :file "dist/out/cemerick/url.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([url]), :arglists ([url] [base-url & path-segments]), :arglists-meta (nil nil)}, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists ([url] [base-url & path-segments]), :doc "Returns a new URL record for the given url string(s).\n\n   The first argument must be a base url — either a complete url string, or\n   a pre-existing URL record instance that will serve as the basis for the new\n   URL.  Any additional arguments must be strings, which are interpreted as\n   relative paths that are successively resolved against the base url's path\n   to construct the final :path in the returned URL record. \n\n   This function does not perform any url-encoding.  Use `url-encode` to encode\n   URL path segments as desired before passing them into this fn."}}, :require-macros {clojure.core clojure.core}, :cljs.analyzer/constants {:seen #{anchor :path query :protocol path :password :username protocol password :port username :host port host :anchor :query}, :order [:protocol :username :password :host :port :path :query :anchor protocol username password host port path query anchor]}, :doc nil}
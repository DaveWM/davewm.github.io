;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name markdown.lists, :imports nil, :requires {string clojure.string, clojure.string clojure.string, markdown.common markdown.common}, :uses {make-heading markdown.common, *substring* markdown.common}, :defs {close-lists {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/markdown/lists.cljc", :line 5, :column 7, :end-line 5, :end-column 18, :arglists (quote ([lists]))}, :name markdown.lists/close-lists, :variadic false, :file "dist/out/markdown/lists.cljc", :end-column 18, :method-params ([lists]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lists]))}, add-row {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/markdown/lists.cljc", :line 10, :column 7, :end-line 10, :end-column 14, :arglists (quote ([row-type list-type num-indents indents content state]))}, :name markdown.lists/add-row, :variadic false, :file "dist/out/markdown/lists.cljc", :end-column 14, :method-params ([row-type list-type num-indents indents content state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 6, :fn-var true, :arglists (quote ([row-type list-type num-indents indents content state]))}, ul {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/markdown/lists.cljc", :line 32, :column 7, :end-line 32, :end-column 9, :arglists (quote ([text state]))}, :name markdown.lists/ul, :variadic false, :file "dist/out/markdown/lists.cljc", :end-column 9, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, ol {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/markdown/lists.cljc", :line 38, :column 7, :end-line 38, :end-column 9, :arglists (quote ([text state]))}, :name markdown.lists/ol, :variadic false, :file "dist/out/markdown/lists.cljc", :end-column 9, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, li {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/markdown/lists.cljc", :line 44, :column 7, :end-line 44, :end-column 9, :arglists (quote ([text {:keys [code codeblock last-line-empty? eof lists], :as state}]))}, :name markdown.lists/li, :variadic false, :file "dist/out/markdown/lists.cljc", :end-column 9, :method-params ([text p__22011]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code codeblock last-line-empty? eof lists], :as state}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:codeblock :lists :buf :ul :else :last-line-empty? :ol :code :eof}, :order [:lists :ul :ol :code :codeblock :last-line-empty? :eof :else :buf]}, :doc nil}
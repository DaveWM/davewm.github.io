;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{uuid}, :name bidi.bidi, :imports nil, :requires {walk clojure.walk, clojure.walk clojure.walk, url cemerick.url, cemerick.url cemerick.url, s schema.core, schema.core schema.core}, :uses {postwalk clojure.walk, url-decode cemerick.url, url-encode cemerick.url}, :defs {tag {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 436, :column 7, :end-line 436, :end-column 10, :arglists (quote ([matched k]))}, :name bidi.bidi/tag, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 10, :method-params ([matched k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 2, :fn-var true, :arglists (quote ([matched k]))}, uuid {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 8, :column 7, :end-line 8, :end-column 11, :arglists (quote ([s])), :doc "Function for creating a UUID of the appropriate type for the platform.\nNote that this function should _only_ be used in route patterns as, at least\nin the case of ClojureScript, it does not validate that the input string is\nactually a valid UUID (this is handled by the route matching logic)."}, :name bidi.bidi/uuid, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Function for creating a UUID of the appropriate type for the platform.\nNote that this function should _only_ be used in route patterns as, at least\nin the case of ClojureScript, it does not validate that the input string is\nactually a valid UUID (this is handled by the route matching logic)."}, ->TaggedMatch {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 427, :column 12, :end-line 427, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([tag matched]))}, :name bidi.bidi/->TaggedMatch, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 23, :method-params ([tag matched]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 427, :end-line 427, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag matched]))}, map->Route {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 356, :column 12, :end-line 356, :end-column 17, :internal-ctor true, :factory :map, :arglists (quote ([G__22387]))}, :name bidi.bidi/map->Route, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 17, :method-params ([G__22387]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 356, :end-line 356, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22387]))}, map->Alternates {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 412, :column 12, :end-line 412, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__22410]))}, :name bidi.bidi/map->Alternates, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 22, :method-params ([G__22410]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 412, :end-line 412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22410]))}, ->Context {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 457, :column 12, :end-line 457, :end-column 19, :internal-ctor true, :factory :positional, :arglists (quote ([context-fn routes]))}, :name bidi.bidi/->Context, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 19, :method-params ([context-fn routes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 457, :end-line 457, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context-fn routes]))}, handler {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 448, :column 20, :end-line 448, :end-column 27, :deprecated true, :arglists (quote ([k handler] [handler])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([k handler] [handler]), :arglists ([k handler] [handler]), :arglists-meta (nil nil)}}, :name bidi.bidi/handler, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([k handler] [handler]), :arglists ([k handler] [handler]), :arglists-meta (nil nil)}, :method-params ([k handler] [handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 448, :deprecated true, :end-line 448, :max-fixed-arity 2, :fn-var true, :arglists ([k handler] [handler])}, map->IdentifiableHandler {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 439, :column 12, :end-line 439, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__22430]))}, :name bidi.bidi/map->IdentifiableHandler, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 31, :method-params ([G__22430]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 439, :end-line 439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22430]))}, RouteSeq {:meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 358, :column 14, :end-line 358, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {gather [[_ context]]}}}, :protocol-symbol true, :name bidi.bidi/RouteSeq, :file "dist/out/bidi/bidi.cljs", :end-column 22, :column 1, :line 358, :protocol-info {:methods {gather [[_ context]]}}, :info nil, :end-line 358, :impls #{bidi.bidi/Context cljs/core.PersistentHashMap cljs/core.LazySeq cljs/core.List cljs/core.PersistentArrayMap default cljs/core.PersistentVector}, :doc nil, :jsdoc ("@interface")}, match-pattern {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 166, :column 4, :end-line 166, :end-column 17, :protocol bidi.bidi/Pattern, :doc nil, :arglists (quote ([_ path]))}, :protocol bidi.bidi/Pattern, :name bidi.bidi/match-pattern, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 17, :method-params ([_ path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ path])), :doc nil}, route-seq {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 361, :column 7, :end-line 361, :end-column 16, :arglists (quote ([[pattern matched] ctx] [route])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([[pattern matched] ctx] [route]), :arglists ([[pattern matched] ctx] [route]), :arglists-meta (nil nil)}}, :name bidi.bidi/route-seq, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([[pattern matched] ctx] [route]), :arglists ([[pattern matched] ctx] [route]), :arglists-meta (nil nil)}, :method-params ([[pattern matched] ctx] [route]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 361, :end-line 361, :max-fixed-arity 2, :fn-var true, :arglists ([[pattern matched] ctx] [route])}, Matched {:meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 169, :column 14, :end-line 169, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {resolve-handler [[_ m]], unresolve-handler [[_ m]]}}}, :protocol-symbol true, :name bidi.bidi/Matched, :file "dist/out/bidi/bidi.cljs", :end-column 21, :column 1, :line 169, :protocol-info {:methods {resolve-handler [[_ m]], unresolve-handler [[_ m]]}}, :info nil, :end-line 169, :impls #{nil bidi.bidi/Context cljs/core.PersistentHashMap cljs/core.LazySeq cljs/core.Keyword cljs/core.List cljs/core.PersistentArrayMap cljs/core.PersistentVector string bidi.bidi/TaggedMatch function bidi.bidi/IdentifiableHandler cljs/core.Symbol}, :doc nil, :jsdoc ("@interface")}, match-pair {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 173, :column 7, :end-line 173, :end-column 17, :arglists (quote ([[pattern matched] env])), :doc "A pair contains a pattern to match (either fully or partially) and an\n  expression yielding a handler. The second parameter is a map\n  containing state, including the remaining path."}, :name bidi.bidi/match-pair, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 17, :method-params ([p__22349 env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[pattern matched] env])), :doc "A pair contains a pattern to match (either fully or partially) and an\n  expression yielding a handler. The second parameter is a map\n  containing state, including the remaining path."}, transform-param {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 66, :column 4, :end-line 66, :end-column 19, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/transform-param, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 19, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, alts {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 421, :column 7, :end-line 421, :end-column 11, :arglists (quote ([& alts])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(alts)], :arglists ([& alts]), :arglists-meta (nil)}}, :name bidi.bidi/alts, :variadic true, :file "dist/out/bidi/bidi.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(alts)], :arglists ([& alts]), :arglists-meta (nil)}, :method-params [(alts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 421, :end-line 421, :max-fixed-arity 0, :fn-var true, :arglists ([& alts])}, TaggedMatch {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable bidi.bidi/Matched cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name bidi.bidi/TaggedMatch, :file "dist/out/bidi/bidi.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 427, :record true, :end-line 427, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, routes {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 399, :column 4, :end-line 399, :end-column 10, :protocol bidi.bidi/RouteProvider, :doc "Provide a bidi route structure. Returns a vector pair,\n  the first element is the pattern, the second element is the matched\n  route or routes.", :arglists (quote ([_]))}, :protocol bidi.bidi/RouteProvider, :name bidi.bidi/routes, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 399, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Provide a bidi route structure. Returns a vector pair,\n  the first element is the pattern, the second element is the matched\n  route or routes."}, unmatch-segment {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 69, :column 4, :end-line 69, :end-column 19, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_ params]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/unmatch-segment, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 19, :method-params ([_ params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ params])), :doc nil}, match-beginning {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 181, :column 7, :end-line 181, :end-column 22, :arglists (quote ([regex-pattern env])), :doc "Match the beginning of the :remainder value in m. If matched, update\n  the :remainder value in m with the path that remains after matching."}, :name bidi.bidi/match-beginning, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 22, :method-params ([regex-pattern env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([regex-pattern env])), :doc "Match the beginning of the :remainder value in m. If matched, update\n  the :remainder value in m with the path that remains after matching."}, resolve-handler {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 170, :column 4, :end-line 170, :end-column 19, :protocol bidi.bidi/Matched, :doc nil, :arglists (quote ([_ m]))}, :protocol bidi.bidi/Matched, :name bidi.bidi/resolve-handler, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 19, :method-params ([_ m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ m])), :doc nil}, IdentifiableHandler {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable bidi.bidi/Matched cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name bidi.bidi/IdentifiableHandler, :file "dist/out/bidi/bidi.cljs", :end-column 31, :type true, :column 12, :internal-ctor true, :line 439, :record true, :end-line 439, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->IdentifiableHandler {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 439, :column 12, :end-line 439, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([id handler]))}, :name bidi.bidi/->IdentifiableHandler, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 31, :method-params ([id handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 439, :end-line 439, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id handler]))}, unresolve-handler {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 171, :column 4, :end-line 171, :end-column 21, :protocol bidi.bidi/Matched, :doc nil, :arglists (quote ([_ m]))}, :protocol bidi.bidi/Matched, :name bidi.bidi/unresolve-handler, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 21, :method-params ([_ m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ m])), :doc nil}, Route {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name bidi.bidi/Route, :file "dist/out/bidi/bidi.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 356, :record true, :end-line 356, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->TaggedMatch {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 427, :column 12, :end-line 427, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__22422]))}, :name bidi.bidi/map->TaggedMatch, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 23, :method-params ([G__22422]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 427, :end-line 427, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22422]))}, segment-regex-group {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 60, :column 4, :end-line 60, :end-column 23, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/segment-regex-group, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 23, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, encode-parameter {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 21, :column 4, :end-line 21, :end-column 20, :protocol bidi.bidi/ParameterEncoding, :doc nil, :arglists (quote ([_]))}, :protocol bidi.bidi/ParameterEncoding, :name bidi.bidi/encode-parameter, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 20, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, param-key {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 63, :column 4, :end-line 63, :end-column 13, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/param-key, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 13, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, matches? {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 72, :column 4, :end-line 72, :end-column 12, :protocol bidi.bidi/PatternSegment, :doc nil, :arglists (quote ([_ s]))}, :protocol bidi.bidi/PatternSegment, :name bidi.bidi/matches?, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 12, :method-params ([_ s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ s])), :doc nil}, Context {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable bidi.bidi/Matched cljs.core/IPrintWithWriter cljs.core/IIterable bidi.bidi/RouteSeq cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name bidi.bidi/Context, :file "dist/out/bidi/bidi.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 457, :record true, :end-line 457, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, gather {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 359, :column 4, :end-line 359, :end-column 10, :protocol bidi.bidi/RouteSeq, :doc "Return a sequence of leaves", :arglists (quote ([_ context]))}, :protocol bidi.bidi/RouteSeq, :name bidi.bidi/gather, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 10, :method-params ([_ context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 359, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ context])), :doc "Return a sequence of leaves"}, match-route {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 336, :column 7, :end-line 336, :end-column 18, :arglists (quote ([route path & {:as options}])), :doc "Given a route definition data structure and a path, return the\n  handler, if any, that matches the path.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(route path {:as options})], :arglists ([route path & {:as options}]), :arglists-meta (nil)}}, :name bidi.bidi/match-route, :variadic true, :file "dist/out/bidi/bidi.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(route path {:as options})], :arglists ([route path & {:as options}]), :arglists-meta (nil)}, :method-params [(route path {:as options})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 2, :fn-var true, :arglists ([route path & {:as options}]), :doc "Given a route definition data structure and a path, return the\n  handler, if any, that matches the path."}, map->Context {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 457, :column 12, :end-line 457, :end-column 19, :internal-ctor true, :factory :map, :arglists (quote ([G__22445]))}, :name bidi.bidi/map->Context, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 19, :method-params ([G__22445]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 457, :end-line 457, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22445]))}, ->Route {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 356, :column 12, :end-line 356, :end-column 17, :internal-ctor true, :factory :positional, :arglists (quote ([handler path]))}, :name bidi.bidi/->Route, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 17, :method-params ([handler path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 356, :end-line 356, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler path]))}, Alternates {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted bidi.bidi/Pattern cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name bidi.bidi/Alternates, :file "dist/out/bidi/bidi.cljs", :end-column 22, :type true, :column 12, :internal-ctor true, :line 412, :record true, :end-line 412, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, compile-route {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 482, :column 20, :end-line 482, :end-column 33, :deprecated true, :arglists (quote ([route]))}, :name bidi.bidi/compile-route, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 33, :method-params ([route]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 482, :deprecated true, :end-line 482, :max-fixed-arity 1, :fn-var true, :arglists (quote ([route]))}, ParameterEncoding {:meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 20, :column 14, :end-line 20, :end-column 31, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {encode-parameter [[_]]}}}, :protocol-symbol true, :name bidi.bidi/ParameterEncoding, :file "dist/out/bidi/bidi.cljs", :end-column 31, :column 1, :line 20, :protocol-info {:methods {encode-parameter [[_]]}}, :info nil, :end-line 20, :impls #{cljs/core.Keyword number cljs/core.UUID string}, :doc nil, :jsdoc ("@interface")}, path-for {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 343, :column 7, :end-line 343, :end-column 15, :arglists (quote ([route handler & {:as params}])), :doc "Given a route definition data structure, a handler and an option map, return a\n  path that would route to the handler. The map must contain the values to any\n  parameters required to create the path, and extra values are silently ignored.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(route handler {:as params})], :arglists ([route handler & {:as params}]), :arglists-meta (nil)}}, :name bidi.bidi/path-for, :variadic true, :file "dist/out/bidi/bidi.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(route handler {:as params})], :arglists ([route handler & {:as params}]), :arglists-meta (nil)}, :method-params [(route handler {:as params})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 2, :fn-var true, :arglists ([route handler & {:as params}]), :doc "Given a route definition data structure, a handler and an option map, return a\n  path that would route to the handler. The map must contain the values to any\n  parameters required to create the path, and extra values are silently ignored."}, Pattern {:meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 162, :column 14, :end-line 162, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {match-pattern [[_ path]], unmatch-pattern [[_ m]]}}}, :protocol-symbol true, :name bidi.bidi/Pattern, :file "dist/out/bidi/bidi.cljs", :end-column 21, :column 1, :line 162, :protocol-info {:methods {match-pattern [[_ path]], unmatch-pattern [[_ m]]}}, :info nil, :end-line 162, :impls #{cljs/core.PersistentHashMap js/RegExp boolean cljs/core.Keyword bidi.bidi/Alternates cljs/core.PersistentArrayMap cljs/core.PersistentVector string}, :doc nil, :jsdoc ("@interface")}, unmatch-pattern {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 167, :column 4, :end-line 167, :end-column 19, :protocol bidi.bidi/Pattern, :doc nil, :arglists (quote ([_ m]))}, :protocol bidi.bidi/Pattern, :name bidi.bidi/unmatch-pattern, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 19, :method-params ([_ m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ m])), :doc nil}, RouteProvider {:meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 398, :column 14, :end-line 398, :end-column 27, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {routes [[_]]}}}, :protocol-symbol true, :name bidi.bidi/RouteProvider, :file "dist/out/bidi/bidi.cljs", :end-column 27, :column 1, :line 398, :protocol-info {:methods {routes [[_]]}}, :info nil, :end-line 398, :impls #{}, :doc nil, :jsdoc ("@interface")}, PatternSegment {:meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 57, :column 14, :end-line 57, :end-column 28, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {segment-regex-group [[_]], param-key [[_]], transform-param [[_]], unmatch-segment [[_ params]], matches? [[_ s]]}}}, :protocol-symbol true, :name bidi.bidi/PatternSegment, :file "dist/out/bidi/bidi.cljs", :end-column 28, :column 1, :line 57, :protocol-info {:methods {segment-regex-group [[_]], param-key [[_]], transform-param [[_]], unmatch-segment [[_ params]], matches? [[_ s]]}}, :info nil, :end-line 57, :impls #{js/RegExp cljs/core.Keyword cljs/core.PersistentVector string function}, :doc nil, :jsdoc ("@interface")}, context {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 467, :column 7, :end-line 467, :end-column 14, :arglists (quote ([f routes])), :doc "Apply a context function to the match context of a matched\n  route. This is useful for injecting data into the match context."}, :name bidi.bidi/context, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 14, :method-params ([f routes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 467, :end-line 467, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f routes])), :doc "Apply a context function to the match context of a matched\n  route. This is useful for injecting data into the match context."}, unmatch-pair {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 281, :column 7, :end-line 281, :end-column 19, :arglists (quote ([v m]))}, :name bidi.bidi/unmatch-pair, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 19, :method-params ([v m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v m]))}, ->Alternates {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 412, :column 12, :end-line 412, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([alts]))}, :name bidi.bidi/->Alternates, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 22, :method-params ([alts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 412, :end-line 412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alts]))}, succeed {:protocol-inline nil, :meta {:file "/home/david/Documents/github/davewm.github.io/dist/out/bidi/bidi.cljs", :line 189, :column 7, :end-line 189, :end-column 14, :arglists (quote ([handler m]))}, :name bidi.bidi/succeed, :variadic false, :file "dist/out/bidi/bidi.cljs", :end-column 14, :method-params ([handler m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler m]))}}, :require-macros {s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{tag :alts :path :routes handler :matched path :context-fn alts routes :params matched :route context-fn :otherwise :route-params :id :remainder :tag id :handler :request-method}, :order [:otherwise :remainder :handler :route-params :params :request-method :route :path handler path :alts alts :tag :matched tag matched :id id :context-fn :routes context-fn routes]}, :doc nil}